openapi: 3.0.0
info:
  title: "Boutique API"
  description: |
    Bienvenue à la documentation officielle de l'API de gestion de boutique.
  version: "1.0.0"
  termsOfService: "http://127.0.0.1:8000/"
  contact:
    name: "Support API"
    url: "http://127.0.0.1:8000/"
    email: "support@example.com"
  license:
    name: "MIT License"

    url: "https://opensource.org/licenses/MIT"

servers:
  # - url: "http://127.0.0.1:8000/api/v1"
  #   description: "Production server"
  - url: "http://127.0.0.1:8000/api/v1"
    description: "Staging server"

tags:
  - name: "Authentification"
    description: "Endpoints liés à l'authentification des utilisateurs"
  - name: "Utilisateurs"
    description: "Endpoints pour la gestion des utilisateurs"
  - name: "Paiements"
    description: "Endpoints pour la gestion des paiements"
  - name: "Articles"
    description: "Endpoints pour la gestion des articles dans la boutique"
  - name: "Clients"
    description: "Endpoints pour la gestion des clients"
  - name: "Dettes"
    description: "Endpoints pour la gestion des dettes"
  - name: "Dettes Archivées"
    description: "Endpoints pour accéder aux dettes archivées"
  - name: "Restaurer Dettes"
    description: "Endpoints pour restaurer les dettes archivées"
  - name: "Demandes"
    description: "Endpoints pour la gestion des demandes de dettes"
  - name: "Notifications"
    description: "Endpoints pour la gestion des notifications"
  - name: "Notifications Client"
    description: "Endpoints pour la gestion des notifications du client connecter"
  - name: "Notifications Demande"
    description: "Endpoints pour la gestion des notifications des demandes"

paths:
  /login:
    post:
      tags:
        - Authentification
      summary: "Connexion d'un utilisateur"
      description: "Permet à un utilisateur de se connecter en fournissant son email et son mot de passe. Un jeton d'authentification est retourné si les informations sont correctes."
      requestBody:
        required: true
        content:
          multipart/form-data:
          # application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "Adresse email de l'utilisateur"
                  example: "mamadou @gmail.com"
                password:
                  type: string
                  description: "Mot de passe de l'utilisateur"
                  example: "password"
              required:
                - email
                - password
      responses:
        '200':
          description: "Connexion réussie"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: "Jeton d'authentification"
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiYzg3ZjEzMWE5NWM3ZGFlMmM0NzRlYTNiZjhjNTc3Y2E2Y2RlYWRlOTBhZDg4YWIzODFmMTc5NDBjYjIxOWEwMWIwZGQxYjY2NDNlYmM4NWYiLCJpYXQiOjE3MjY0NTI5OTkuMzYxOTAzLCJuYmYiOjE3MjY0NTI5OTkuMzYxOTA1LCJleHAiOjE3NDIwOTEzOTkuMzQ4MDkxLCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.vagkw27rlOVcPj2evTW3MNXdPK2ML9Li-IjE0xgabW-BgaGWVU4BvRLiEiYYIaAHkODyirEF1zVlCYuH4GXdrWn0Pty73BPSV5-hMKNEB9Zx1BLUAQ-2gL8tVnMFaV6IAjsWWNx5jxBlLG_tG0sVcwGS8ihdCrP9Jg4K-Q3WOx2m8DxlOzBNRETckUBqG7POollAdAEDzAvPmXHmtxwWkYNd9npMnCNtbZt7s6l4SuQpa1mZjfAR47lgroTGZWal42KDUJzIsubz-CV5JYocQ9FNE7TNzZmx7U22-BxuywLnxSlL1fR4hvgkEBupaQzNln24QfO1Hh5eLEpZF0E3QRELrX9TexJiO3OftoAbTD_42bRvxX4Xj8fAVMpajp700OmU3PbNzpNKOQAefmqW7C4RaWp_XZL7gpQUmc3SZLjcLusnfBawcvTPCXcEa84W6yoJqCl4jOvi5XD9vj9SPVm-DQObYgluH_tWMBAYY7D62C5es9DHoauo9Puchl1x8GrBfEgLSsW9T4XCk93cXw0rqdDbTW_vhHt1NH5TlJD0bxWkqHDWH6Dph5UG0NxWJaC5IhwavyQXzPMGmlZUfYgjj-41aWz-82KdQWWsxVLO579vi1zntGBNlyn_YQYVP9rE-WsMjhw5jny6ukRXT8pV3RiWlQbRXyLtJYg8E3Q"
                      token_type:
                        type: string
                        description: "Type de jeton"
                        example: "Bearer"
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCESS"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Connexion réussie"
        '401':
          description: "Informations d'identification invalides"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Identifiants invalides."
        '422':
          description: "Erreur de validation des données de la requête"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: object
                        additionalProperties:
                          type: array
                          items:
                            type: string
                        description: "Erreurs de validation"
                        example:
                          email:
                            - "L'email est obligatoire."
                          password:
                            - "Le mot de passe est obligatoire."
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "L'email est obligatoire. (and 1 more error)"
  /logout:
    post:
      tags:
        - Authentification
      summary: "Déconnexion de l'utilisateur"
      description: "Permet à un utilisateur de se déconnecter en invalidant son jeton d'authentification."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Déconnexion réussie"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "Aucune donnée spécifique en cas de succès de déconnexion"
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de confirmation"
                    example: "Déconnexion réussie"
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "Aucune donnée en cas d'échec d'authentification"
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Non authentifié."


# Les routes pour la resourcs users
  /users:
    get:
      tags:
        - Utilisateurs
      summary: "Récupère la liste des utilisateurs"
      description: "Retourne une collection des utilisateurs avec des options de filtrage sur le rôle (admin, boutiquier, client) et l'activité. L'utilisateur doit être authentifié et autorisé à voir tous les utilisateurs."
      security:
        - bearerAuth: []
      parameters:
        - name: role
          in: query
          description: "Filtrer les utilisateurs par rôle (admin, boutiquier, client)"
          required: false
          schema:
            type: string
            enum: ["admin", "boutiquier", "client"]
            example: "admin"
        - name: active
          in: query
          description: "Filtrer les utilisateurs par statut d'activité (true ou false)"
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: "Liste des utilisateurs récupérée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        nom:
                          type: string
                          example: "Dupont"
                        prenom:
                          type: string
                          example: "Jean"
                        photo:
                          type: string
                          example: "https://example.com/photo.jpg"
                        email:
                          type: string
                          example: "jean.dupont@example.com"
                        role:
                          type: string
                          example: "admin"
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de confirmation"
                    example: "Liste des utilisateurs récupérée avec succès"
        '403':
          description: "Accès refusé. L'utilisateur n'a pas la permission de voir les utilisateurs."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "Pas de données en cas d'accès refusé"
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "Pas de données en cas d'authentification échouée"
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."

    post:
      tags:
        - Utilisateurs
      summary: "Créer un nouvel utilisateur"
      description: "Crée un nouvel utilisateur."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  description: "Nom de l'utilisateur"
                  example: "Dupont"
                prenom:
                  type: string
                  description: "Prénom de l'utilisateur"
                  example: "Jean"
                email:
                  type: string
                  description: "Email de l'utilisateur"
                  example: "jean.dupont@example.com"
                role:
                  type: string
                  description: "Rôle de l'utilisateur (admin ou boutiquier)"
                  example: "admin"
                photo:
                  type: string
                  format: binary
                  description: "Photo de l'utilisateur"
                password:
                  type: string
                  description: "Mot de passe de l'utilisateur"
                  example: "Passer123@"
                password_confirmation:
                  type: string
                  description: "Confirmation du mot de passe"
                  example: "Passer123@"
      responses:
        '201':
          description: "Utilisateur créé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nom:
                        type: string
                        example: "Dupont"
                      prenom:
                        type: string
                        example: "Jean"
                      email:
                        type: string
                        example: "jean.dupont@example.com"
                      role:
                        type: string
                        example: "admin"
                      photo:
                        type: string
                        example: "https://example.com/photo.jpg"
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Utilisateur créé avec succès"
                    example: "Utilisateur créé avec succès."
        '422':
          description: "Validation échouée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: object
                        properties:
                          nom:
                            type: array
                            items:
                              type: string
                              example: "Le nom est obligatoire."
                          prenom:
                            type: array
                            items:
                              type: string
                              example: "Le prénom est obligatoire."
                          email:
                            type: array
                            items:
                              type: string
                              example: "Cet email est déjà utilisé."
                          role:
                            type: array
                            items:
                              type: string
                              example: "Le rôle doit être admin ou boutiquier."
                          password:
                            type: array
                            items:
                              type: string
                              example: "La confirmation du mot de passe ne correspond pas."
                          photo:
                            type: array
                            items:
                              type: string
                              example: "Le photo est obligatoire."
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "La création a échoué. Veuillez vérifier les erreurs."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."

  /users/{id}:
    get:
      tags:
        - Utilisateurs
      summary: "Récupère les informations d'un utilisateur spécifique"
      description: "Retourne les détails d'un utilisateur en fonction de son ID. L'utilisateur doit être authentifié et autorisé à voir cet utilisateur spécifique."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID de l'utilisateur à récupérer"
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Détails de l'utilisateur récupérés avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nom:
                        type: string
                        example: "Dupont"
                      prenom:
                        type: string
                        example: "Jean"
                      photo:
                        type: string
                        example: "https://example.com/photo.jpg"
                      email:
                        type: string
                        example: "jean.dupont@example.com"
                      role:
                        type: string
                        example: "admin"
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Détails de l'utilisateur récupérés avec succès"
                    example: "Utilisateur récupéré avec succès"
        '403':
          description: "Accès refusé. L'utilisateur n'a pas la permission de voir cet utilisateur spécifique."
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "Pas de données en cas d'accès refusé"
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '404':
          description: "Utilisateur non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "Pas de données en cas d'utilisateur non trouvé"
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Utilisateur non trouvé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: "Pas de données en cas d'authentification échouée"
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."

    patch:
      tags:
        - Utilisateurs
      summary: "Met à jour les informations d'un utilisateur spécifique"
      description: "Met à jour les détails d'un utilisateur en fonction de son ID. L'utilisateur doit être authentifié et autorisé à mettre à jour cet utilisateur spécifique."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID de l'utilisateur à mettre à jour"
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  description: "Nom de l'utilisateur"
                  example: "Dupont"
                prenom:
                  type: string
                  description: "Prénom de l'utilisateur"
                  example: "Jean"
                photo:
                  type: string
                  format: binary
                  description: "Photo de l'utilisateur"
                login:
                  type: string
                  description: "Login de l'utilisateur"
                  example: "jean.dupont@example.com"
                role:
                  type: string
                  description: "Rôle de l'utilisateur (admin ou boutiquier)"
                  example: "admin"
                password:
                  type: string
                  description: "Mot de passe de l'utilisateur"
                  example: "Passer123@"
                password_confirmation:
                  type: string
                  description: "Confirmation du mot de passe"
                  example: "Passer123@"
      responses:
        '200':
          description: "Utilisateur mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nom:
                        type: string
                        example: "Dupont"
                      prenom:
                        type: string
                        example: "Jean"
                      email:
                        type: string
                        example: "jean.dupont@example.com"
                      role:
                        type: string
                        example: "admin"
                      photo:
                        type: string
                        example: "https://example.com/photo.jpg"
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Utilisateur mis à jour avec succès"
                    example: "Utilisateur mis à jour avec succès"
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Accès refusé."
        '404':
          description: "Utilisateur non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Utilisateur non trouvé."
        '422':
          description: "Validation échouée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: object
                        properties:
                          nom:
                            type: array
                            items:
                              type: string
                              example: "Le nom est obligatoire."
                          prenom:
                            type: array
                            items:
                              type: string
                              example: "Le prénom est obligatoire."
                          login:
                            type: array
                            items:
                              type: string
                              example: "Cet email est déjà utilisé."
                          role:
                            type: array
                            items:
                              type: string
                              example: "Le rôle doit être admin ou boutiquier."
                          password:
                            type: array
                            items:
                              type: string
                              example: "La confirmation du mot de passe ne correspond pas."
                          photo:
                            type: array
                            items:
                              type: string
                              example: "La photo est obligatoire."
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "La mise à jour a échoué. Veuillez vérifier les erreurs."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."

  /register:
    post:
      tags:
        - Utilisateurs
      summary: "Enregistre un nouvel utilisateur"
      description: "Crée un nouvel utilisateur. L'utilisateur doit être authentifié et autorisé à enregistrer un utilisateur. Le client associé doit exister et ne doit pas être déjà associé à un utilisateur."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  description: "Nom de l'utilisateur"
                  example: "Dupont"
                prenom:
                  type: string
                  description: "Prénom de l'utilisateur"
                  example: "Jean"
                photo:
                  type: string
                  format: binary
                  description: "Photo de l'utilisateur"
                client_id:
                  type: integer
                  description: "ID du client associé"
                  example: 1
                email:
                  type: string
                  description: "Email de l'utilisateur"
                  example: "jean.dupont@example.com"
                password:
                  type: string
                  description: "Mot de passe de l'utilisateur"
                  example: "Passer123@"
                password_confirmation:
                  type: string
                  description: "Confirmation du mot de passe"
                  example: "Passer123@"
      responses:
        '201':
          description: "Utilisateur enregistré avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nom:
                        type: string
                        example: "Dupont"
                      prenom:
                        type: string
                        example: "Jean"
                      email:
                        type: string
                        example: "jean.dupont@example.com"
                      photo:
                        type: string
                        example: "https://example.com/photo.jpg"
                      client_id:
                        type: integer
                        example: 1
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Utilisateur enregistré avec succès"
                    example: "Utilisateur enregistré avec succès."
        '422':
          description: "Validation échouée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: object
                        properties:
                          nom:
                            type: array
                            items:
                              type: string
                              example: "Le nom est obligatoire."
                          prenom:
                            type: array
                            items:
                              type: string
                              example: "Le prénom est obligatoire."
                          photo:
                            type: array
                            items:
                              type: string
                              example: "La photo est obligatoire."
                          client_id:
                            type: array
                            items:
                              type: string
                              example: "Ce client n'existe pas ou est déjà associé à un utilisateur."
                          email:
                            type: array
                            items:
                              type: string
                              example: "Cet email est déjà utilisé."
                          password:
                            type: array
                            items:
                              type: string
                              example: "La confirmation du mot de passe ne correspond pas."
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "La création a échoué. Veuillez vérifier les erreurs."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."

# Les routes pour la resource paiements
  /paiements:
    get:
      tags:
        - Paiements
      summary: "Récupère une liste de paiements"
      description: "Récupère tous les paiements en fonction des filtres spécifiés. L'utilisateur doit être authentifié et autorisé à voir les paiements."
      security:
        - bearerAuth: []
      parameters:
        - name: client_id
          in: query
          description: "ID du client pour filtrer les paiements"
          required: false
          schema:
            type: integer
            example: 1
        - name: dette_id
          in: query
          description: "ID de la dette pour filtrer les paiements"
          required: false
          schema:
            type: integer
            example: 1
        - name: start_date
          in: query
          description: "Date de début pour filtrer les paiements"
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: end_date
          in: query
          description: "Date de fin pour filtrer les paiements"
          required: false
          schema:
            type: string
            format: date
            example: "2024-12-31"
        - name: montant_min
          in: query
          description: "Montant minimum pour filtrer les paiements"
          required: false
          schema:
            type: number
            format: float
            example: 100.00
        - name: montant_max
          in: query
          description: "Montant maximum pour filtrer les paiements"
          required: false
          schema:
            type: number
            format: float
            example: 500.00
      responses:
        '200':
          description: "Liste des paiements récupérée avec succès"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    montant:
                      type: number
                      format: float
                      example: 250.00
                    date:
                      type: string
                      format: date-time
                      example: "2024-01-01T12:00:00Z"
                    detteId:
                      type: integer
                      example: 1
                    clientId:
                      type: integer
                      example: 1
                    dette:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        montant:
                          type: number
                          format: float
                          example: 500.00
                        restant:
                          type: number
                          format: float
                          example: 250.00
                    client:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        nom:
                          type: string
                          example: "Dupont"
                        prenom:
                          type: string
                          example: "Jean"
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accès refusé."

    post:
      tags:
        - Paiements
      summary: "Crée un nouveau paiement"
      description: "Crée un nouveau paiement en utilisant les données fournies dans la requête. L'utilisateur doit être authentifié et autorisé à créer des paiements."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                montant:
                  type: number
                  format: float
                  description: "Le montant du paiement"
                  example: 150.00
                dette_id:
                  type: integer
                  description: "ID de la dette associée au paiement"
                  example: 1
                client_id:
                  type: integer
                  description: "ID du client associé au paiement"
                  example: 2
              required:
                - montant
                - dette_id
      responses:
        '201':
          description: "Paiement créé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  montant:
                    type: number
                    format: float
                    example: 150.00
                  date:
                    type: string
                    format: date-time
                    example: "2024-09-15T14:00:00Z"
                  detteId:
                    type: integer
                    example: 1
                  clientId:
                    type: integer
                    example: 2
        '400':
          description: "Données invalides fournies dans la requête"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Les données fournies sont invalides."
                  errors:
                    type: object
                    properties:
                      montant:
                        type: array
                        items:
                          type: string
                        example: ["Le montant est requis.", "Le montant doit être un nombre."]
                      dette_id:
                        type: array
                        items:
                          type: string
                        example: ["L'ID de la dette est requis."]
                      client_id:
                        type: array
                        items:
                          type: string
                        example: ["L'ID du client est requis."]
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accès refusé."

  /paiements/{id}:
    get:
      tags:
        - Paiements
      summary: "Récupère un paiement spécifique par ID"
      description: "Récupère les détails d'un paiement spécifique en utilisant son ID. L'utilisateur doit être authentifié et autorisé à voir le paiement. La réponse peut inclure des relations supplémentaires en fonction des paramètres de requête."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du paiement à récupérer"
          schema:
            type: integer
            example: 1
        - name: include
          in: query
          description: "Relations à inclure dans la réponse (par exemple: 'dette', 'client')"
          required: false
          schema:
            type: string
            example: "dette,client"
      responses:
        '200':
          description: "Paiement récupéré avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  montant:
                    type: number
                    format: float
                    example: 250.00
                  date:
                    type: string
                    format: date-time
                    example: "2024-01-01T12:00:00Z"
                  detteId:
                    type: integer
                    example: 1
                  clientId:
                    type: integer
                    example: 1
                  dette:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      montant:
                        type: number
                        format: float
                        example: 500.00
                      restant:
                        type: number
                        format: float
                        example: 250.00
                  client:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nom:
                        type: string
                        example: "Dupont"
                      prenom:
                        type: string
                        example: "Jean"
        '404':
          description: "Paiement non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Paiement not found"
                  status:
                    type: integer
                    example: 404
                  data:
                    type: array
                    example: null
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accès refusé."

    put:
      tags:
        - Paiements
      summary: "Met à jour un paiement existant"
      description: "Met à jour les détails d'un paiement existant identifié par l'ID fourni. L'utilisateur doit être authentifié et autorisé à mettre à jour le paiement."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du paiement à mettre à jour"
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                montant:
                  type: number
                  format: float
                  description: "Le montant du paiement"
                  example: 200.00
                date:
                  type: string
                  format: date-time
                  description: "La date du paiement"
                  example: "2024-09-15T14:00:00Z"
                dette_id:
                  type: integer
                  description: "ID de la dette associée au paiement"
                  example: 1
                client_id:
                  type: integer
                  description: "ID du client associé au paiement"
                  example: 2
              required:
                - montant
      responses:
        '200':
          description: "Paiement mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  montant:
                    type: number
                    format: float
                    example: 200.00
                  date:
                    type: string
                    format: date-time
                    example: "2024-09-15T14:00:00Z"
                  detteId:
                    type: integer
                    example: 1
                  clientId:
                    type: integer
                    example: 2
        '400':
          description: "Données invalides fournies dans la requête"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Les données fournies sont invalides."
                  errors:
                    type: object
                    properties:
                      montant:
                        type: array
                        items:
                          type: string
                        example: ["Le montant doit être un nombre."]
                      date:
                        type: array
                        items:
                          type: string
                        example: ["La date est requise."]
                      dette_id:
                        type: array
                        items:
                          type: string
                        example: ["L'ID de la dette est requis."]
                      client_id:
                        type: array
                        items:
                          type: string
                        example: ["L'ID du client est requis."]
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accès refusé."
        '404':
          description: "Paiement non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Paiement not found"
                  status:
                    type: integer
                    example: 404
                  data:
                    type: array
                    example: null
                    description: "Données nulles lorsqu'aucun paiement n'est trouvé"

    delete:
      tags:
        - Paiements
      summary: "Supprime un paiement existant"
      description: "Supprime un paiement identifié par l'ID fourni. L'utilisateur doit être authentifié et autorisé à supprimer le paiement."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du paiement à supprimer"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Paiement supprimé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Paiement deleted successfully"
        '404':
          description: "Paiement non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Paiement not found"
                  status:
                    type: integer
                    example: 404
                  data:
                    type: array
                    example: null
                    description: "Données nulles lorsqu'aucun paiement n'est trouvé"
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accès refusé."

# Les routes pour la resource articles
  /articles:
    get:
      tags:
        - Articles
      summary: "Récupère tous les articles"
      description: "Retourne la liste des articles en fonction des filtres appliqués. L'utilisateur doit être authentifié et autorisé à voir les articles."
      security:
        - bearerAuth: []
      parameters:
        - name: disponible
          in: query
          description: "Filtrer les articles disponibles (oui pour disponible, non pour non disponible)"
          required: false
          schema:
            enum: [oui, non]
            example: "oui"
        - name: quantite
          in: query
          description: "Filtrer les articles par quantité"
          required: false
          schema:
            type: integer
            example: 10
        - name: libelle
          in: query
          description: "Filtrer les articles par libellé"
          required: false
          schema:
            type: string
            example: "T-shirt"
      responses:
        '200':
          description: "Liste des articles récupérés avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                    description: "Liste des articles"
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Articles récupérés avec succès."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."

    post:
      tags:
        - Articles
      summary: "Créer un nouvel article"
      description: "Crée un nouvel article. L'utilisateur doit être authentifié et autorisé à créer un article."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  description: "Libellé de l'article"
                  example: "T-shirt"
                price:
                  type: number
                  format: float
                  description: "Prix de l'article"
                  example: 19.99
                quantity:
                  type: integer
                  description: "Quantité de l'article"
                  example: 10
      responses:
        '201':
          description: "Article créé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Article créé avec succès."
        '422':
          description: "Validation échouée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: object
                        properties:
                          libelle:
                            type: array
                            items:
                              type: string
                              example: "Le libellé est requis."
                          price:
                            type: array
                            items:
                              type: string
                              example: "Le prix doit être supérieur à 0.01."
                          quantity:
                            type: array
                            items:
                              type: string
                              example: "La quantité est requise."
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "La création a échoué. Veuillez vérifier les erreurs."
                    example: "Validation échouée."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

  /articles/{id}:
    get:
      tags:
        - Articles
      summary: "Récupère un article spécifique"
      description: "Récupère les détails d'un article spécifique. L'utilisateur doit être authentifié et autorisé à consulter cet article."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID de l'article à récupérer"
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Article récupéré avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Article récupéré avec succès."
        '404':
          description: "Article non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Article non trouvé."
                    example: "Article non trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

    put:
      tags:
        - Articles
      summary: "Met à jour un article spécifique"
      description: "Met à jour les détails d'un article spécifique. L'utilisateur doit être authentifié et autorisé à mettre à jour cet article."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID de l'article à mettre à jour"
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  description: "Libellé de l'article"
                  example: "T-shirt"
                price:
                  type: number
                  format: float
                  description: "Prix de l'article"
                  example: 19.99
                quantity:
                  type: integer
                  description: "Quantité de l'article"
                  example: 10
      responses:
        '200':
          description: "Article mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Article'
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Article mis à jour avec succès."
        '404':
          description: "Article non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Article non trouvé."
                    example: "Article non trouvé."
        '422':
          description: "Validation échouée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: object
                        properties:
                          libelle:
                            type: array
                            items:
                              type: string
                              example: "Le libellé est requis."
                          price:
                            type: array
                            items:
                              type: string
                              example: "Le prix doit être supérieur à 0.01."
                          quantity:
                            type: array
                            items:
                              type: string
                              example: "La quantité est requise."
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "La mise à jour a échoué. Veuillez vérifier les erreurs."
                    example: "Validation échouée."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

    delete:
      tags:
        - Articles
      summary: "Supprime un article spécifique"
      description: "Supprime un article en fonction de son ID. L'utilisateur doit être authentifié et autorisé à supprimer cet article."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID de l'article à supprimer"
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Article supprimé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "L'article a bien été supprimé."
        '404':
          description: "Article non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "L'article n'existe pas."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

    patch:
      tags:
        - Articles
      summary: "Incrémente la quantité d'un article"
      description: "Incrémente la quantité d'un article spécifique identifié par son ID. L'utilisateur doit être authentifié et autorisé à modifier l'article."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de l'article dont la quantité sera incrémentée"
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: "Quantité à ajouter à l'article"
                  example: 5
              required:
                - quantity
      responses:
        '200':
          description: "Quantité mise à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      libelle:
                        type: string
                        example: "Article Exemple"
                      price:
                        type: number
                        format: float
                        example: 20.50
                      quantity:
                        type: integer
                        example: 15
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Quantité de l'article mise à jour avec succès."
        '400':
          description: "Erreur de validation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "La quantité doit être un entier supérieur ou égal à 1."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."
        '404':
          description: "Article non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Article non trouvé."
                    example: "L'article avec l'ID spécifié n'existe pas."

  /articles/libelle:
    post:
      tags:
        - Articles
      summary: "Recherche des articles par libellé"
      description: "Rechercher des articles en fonction du libellé fourni. L'utilisateur doit être authentifié et autorisé à voir les articles."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  description: "Libellé des articles à rechercher"
                  example: "Veste"
              required:
                - libelle
      responses:
        '200':
          description: "Articles récupérés avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        libelle:
                          type: string
                          example: "Veste en cuir"
                        price:
                          type: number
                          format: float
                          example: 99.99
                        quantity:
                          type: integer
                          example: 10
                    example:
                      - libelle: "Veste en cuir"
                        price: 99.99
                        quantity: 10
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Articles récupérés avec succès."
        '404':
          description: "Aucun article trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Aucun article trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

  /articles/stock:
    post:
      tags:
        - Articles
      summary: "Met à jour le stock des articles"
      description: "Met à jour le stock pour une liste d'articles fournie. L'utilisateur doit être authentifié et autorisé à voir les articles."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                articles:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "ID de l'article"
                        example: 1
                      quantity:
                        type: integer
                        description: "Quantité à mettre à jour"
                        example: 10
                  required:
                    - id
                    - quantity
              required:
                - articles
      responses:
        '200':
          description: "Stock mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        quantity:
                          type: integer
                          example: 10
                    example:
                      - id: 1
                        quantity: 10
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Stock mis à jour avec succès."
        '400':
          description: "Erreur de validation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Les données envoyées sont invalides."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

# Les routes pour la resource clients
  /clients:
    get:
      tags:
        - Clients
      summary: "Obtenir la liste des clients ou un client spécifique"
      description: "Récupère la liste des clients ou un client spécifique selon la présence du paramètre `user_id`. L'utilisateur doit être authentifié et autorisé à visualiser les clients."
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: query
          required: false
          description: "ID de l'utilisateur pour récupérer un client spécifique"
          schema:
            type: integer
            example: 3
        - name: comptes
          in: query
          required: false
          description: "Filtrer les clients par comptes"
          schema:
            enum: [oui, non]
        - name: active
          in: query
          required: false
          description: "Filtrer les clients par statut actif"
          schema:
            enum: [oui, non]
        - name: include
          in: query
          required: false
          description: "Inclure des relations supplémentaires"
          schema:
            enum: [user]
      responses:
        '200':
          description: "Liste des clients ou un client spécifique récupéré avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    oneOf:
                      - type: array
                        items:
                          $ref: '#/components/schemas/Client'
                      - type: object
                        $ref: '#/components/schemas/Client'
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Liste des clients récupérée avec succès."
        '404':
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Client non trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

    post:
      tags:
        - Clients
      summary: "Créer un nouveau client"
      description: "Crée un nouveau client avec les données fournies dans la requête. L'utilisateur doit être autorisé à créer un client."
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                surname:
                  type: string
                  description: "Le surnom du client"
                  example: "Dupont"
                adresse:
                  type: string
                  description: "L'adresse du client"
                  example: "10 rue de la Paix"
                telephone:
                  type: string
                  description: "Le numéro de téléphone du client"
                  example: "778133532"
                categorie:
                  type: string
                  description: "La catégorie du client"
                  enum: [gold, bronze, silver]
                  example: "silver"
                max_montant:
                  type: integer
                  description: "Le montant maximal autorisé pour les clients de la catégorie silver"
                  example: 5000
                'user[nom]':
                  type: string
                  description: "Le nom de l'utilisateur"
                  example: "Jean"
                'user[prenom]':
                  type: string
                  description: "Le prénom de l'utilisateur"
                  example: "Claude"
                'user[photo]':
                  type: string
                  format: binary
                  description: "La photo de l'utilisateur"
                'user[email]':
                  type: string
                  description: "L'email de l'utilisateur"
                  example: "jean.claude@example.com"
                'user[password]':
                  type: string
                  description: "Le mot de passe de l'utilisateur"
                  example: "Passer123@"
              required:
                - surname
                - telephone
                - categorie
      responses:
        '201':
          description: "Client créé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Client'
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message de succès"
                    example: "Client créé avec succès."
        '400':
          description: "Erreur de validation des données"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Erreur de validation des données."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Accès refusé."
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Non authentifié."
                    example: "Non authentifié."

  /clients/{id}:
    get:
      tags:
        - Clients
      summary: "Obtenir les détails d'un client"
      description: "Récupère les détails d'un client spécifique en fonction de son ID. L'utilisateur doit être autorisé à voir le client."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID du client à récupérer"
      responses:
        '200':
          description: "Client récupéré avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Client'
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'information"
                    example: "Client récupéré avec succès."
        '404':
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Client non trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Non authentifié."

    put:
      tags:
        - Clients
      summary: "Mettre à jour un client"
      description: "Met à jour les informations d'un client spécifique en fonction de son ID. L'utilisateur doit être autorisé à mettre à jour le client."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID du client à mettre à jour"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                surname:
                  type: string
                  description: "Le surnom du client"
                  example: "Dupont"
                adresse:
                  type: string
                  description: "L'adresse du client"
                  example: "10 rue de la Paix"
                telephone:
                  type: string
                  description: "Le numéro de téléphone du client"
                  example: "778133532"
                categorie:
                  type: string
                  description: "La catégorie du client"
                  enum: [gold, bronze, silver]
                  example: "silver"
                max_montant:
                  type: integer
                  description: "Le montant maximal autorisé pour les clients de la catégorie silver"
                  example: 5000
                'user[nom]':
                  type: string
                  description: "Le nom de l'utilisateur"
                  example: "Jean"
                'user[prenom]':
                  type: string
                  description: "Le prénom de l'utilisateur"
                  example: "Claude"
                'user[photo]':
                  type: string
                  format: binary
                  description: "La photo de l'utilisateur"
                'user[email]':
                  type: string
                  description: "L'email de l'utilisateur"
                  example: "jean.claude@example.com"
                'user[password]':
                  type: string
                  description: "Le mot de passe de l'utilisateur"
                  example: "Passer123@"
      responses:
        '200':
          description: "Client mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Client'
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'information"
                    example: "Client mis à jour avec succès."
        '400':
          description: "Requête invalide"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "La requête est invalide, veuillez vérifier les données fournies."
        '404':
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Client non trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Non authentifié."

    delete:
      tags:
        - Clients
      summary: "Supprimer un client"
      description: "Supprime un client spécifique en fonction de son ID. L'utilisateur doit être autorisé à supprimer le client."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID du client à supprimer"
      responses:
        '200':
          description: "Client supprimé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'information"
                    example: "Client supprimé avec succès."
        '404':
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Client non trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Non authentifié."

  /clients/telephone:
    post:
      tags:
        - Clients
      summary: "Rechercher un client par numéro de téléphone"
      description: "Permet de rechercher un client en fonction de son numéro de téléphone. L'utilisateur doit être autorisé à voir les clients."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                telephone:
                  type: string
                  description: "Numéro de téléphone du client à rechercher"
                  example: "778133532"
              required:
                - telephone
      responses:
        '200':
          description: "Client trouvé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Client'
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'information"
                    example: "Client trouvé avec succès."
        '400':
          description: "Requête invalide"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Le numéro de téléphone est obligatoire et doit être valide."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Non authentifié."

  /clients/{id}/user:
    post:
      tags:
        - Clients
      summary: "Obtenir les détails d'un client avec les informations de l'utilisateur associé"
      description: "Récupère les détails d'un client avec ses informations d'utilisateur associées en fonction de l'ID du client. L'utilisateur doit être autorisé à voir ce client."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID du client à récupérer"
      responses:
        '200':
          description: "Client et utilisateur récupérés avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Client'
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'information"
                    example: "Client et utilisateur récupérés avec succès."
        '404':
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Client non trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Non authentifié."

  /clients/{id}/dettes:
    post:
      tags:
        - Clients
      summary: "Obtenir les détails d'un client avec ses dettes associées"
      description: "Récupère les détails d'un client avec ses dettes associées en fonction de l'ID du client. L'utilisateur doit être autorisé à voir ce client."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID du client à récupérer"
      responses:
        '200':
          description: "Client et ses dettes récupérés avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ClientDette'
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                    example: "SUCCES"
                  message:
                    type: string
                    description: "Message d'information"
                    example: "Client et dettes récupérés avec succès."
        '404':
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Client non trouvé."
        '403':
          description: "Accès refusé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Accès refusé."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                    description: "Aucune donnée"
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    description: "Statut de la réponse"
                    example: "ECHEC"
                  message:
                    type: string
                    description: "Message d'erreur"
                    example: "Non authentifié."

# Les route pour la ressouce dette
  /dettes:
    get:
      tags:
        - Dettes
      summary: "Obtenir la liste des dettes"
      description: "Récupère une liste des dettes avec la possibilité d'inclure des relations et de filtrer par statut."
      security:
        - bearerAuth: []
      parameters:
        - name: include
          in: query
          description: "Liste des relations à inclure dans la réponse, séparées par des virgules."
          required: false
          schema:
            type: string
        - name: statut
          in: query
          description: "Statut des dettes à filtrer."
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "Liste des dettes récupérée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dette'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Liste des dettes récupérée avec succès."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['SUCCES', 'ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à accéder à cette ressource."

    post:
      tags:
        - Dettes
      summary: "Créer une nouvelle dette"
      description: "Crée une nouvelle dette avec les informations fournies dans la requête."
      security:
        - bearerAuth: []
      requestBody:
        description: "Les détails de la nouvelle dette à créer."
        content:
          application/json:
            schema:
              type: object
              properties:
                montant:
                  type: integer
                  example: 1000
                clientId:
                  type: integer
                  example: 1
                articles:
                  type: array
                  items:
                    type: object
                    properties:
                      articleId:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 2
                      price:
                        type: number
                        format: float
                        example: 50.0
                paiement:
                  type: object
                  properties:
                    montant:
                      type: number
                      format: float
                      example: 100.0
                echeance:
                  type: string
                  format: date
                  example: "2024-12-31"
              required:
                - montant
                - clientId
                - articles
                - echeance
      responses:
        '201':
          description: "Dette créée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Dette créée avec succès."
        '400':
          description: "Requête invalide"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Les données fournies sont invalides."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à créer une dette."

  /dettes/{id}:
    get:
      tags:
        - Dettes
      summary: "Récupérer une dette spécifique"
      description: "Récupère les détails d'une dette en fonction de son identifiant. Les relations supplémentaires peuvent être incluses si spécifié."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la dette à récupérer"
          schema:
            type: integer
            example: 1
        - name: include
          in: query
          description: "Liste des relations à inclure, séparées par des virgules (ex: client,articles,paiements)"
          schema:
            type: string
      responses:
        '200':
          description: "Dette récupérée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Dette récupérée avec succès."
        '404':
          description: "Dette non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "La dette demandée n'existe pas."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à consulter cette dette."

    put:
      tags:
        - Dettes
      summary: "Mettre à jour une dette existante"
      description: "Met à jour les détails d'une dette spécifique en fonction de son identifiant. Les articles et paiements associés peuvent être mis à jour également."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la dette à mettre à jour"
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                montant:
                  type: number
                  format: float
                  example: 200.00
                client_id:
                  type: integer
                  example: 1
                date:
                  type: string
                  format: date
                  example: "2024-09-15"
                articles:
                  type: array
                  items:
                    type: object
                    properties:
                      article_id:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 2
                      price:
                        type: number
                        format: float
                        example: 50.00
                paiement:
                  type: object
                  properties:
                    montant:
                      type: number
                      format: float
                      example: 100.00
                echeance:
                  type: string
                  format: date
                  example: "2024-10-01"
      responses:
        '200':
          description: "Dette mise à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Dette mise à jour avec succès."
        '404':
          description: "Dette non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "La dette demandée n'existe pas."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à mettre à jour cette dette."

  /dettes/{id}/articles:
    post:
      tags:
        - Dettes
      summary: "Obtenir une dette avec ses articles associés"
      description: "Récupère les détails d'une dette spécifique, incluant les articles associés, en fonction de son identifiant."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la dette pour laquelle les articles doivent être récupérés"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Dette avec les articles récupérés avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Dette et articles récupérés avec succès."
        '404':
          description: "Dette non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "La dette demandée n'existe pas."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à voir les détails de cette dette."

  /dettes/{id}/paiements:
    post:
      tags:
        - Dettes
      summary: "Obtenir une dette avec ses paiements associés"
      description: "Récupère les détails d'une dette spécifique, incluant les paiements associés, en fonction de son identifiant."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la dette pour laquelle les paiements doivent être récupérés"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Dette avec les paiements récupérés avec succès"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Dette et paiements récupérés avec succès."
        '404':
          description: "Dette non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "La dette demandée n'existe pas."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à voir les détails de cette dette."

  /dettes/{id}/addPaiement:
    post:
      tags:
        - Dettes
      summary: "Ajouter un paiement à une dette"
      description: "Ajoute un paiement à une dette spécifique en fonction de son identifiant. Nécessite une authentification et l'autorisation de mettre à jour la dette."
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la dette à laquelle le paiement doit être ajouté"
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                montant:
                  type: number
                  format: float
                  description: "Montant du paiement"
                  example: 100.00
              required:
                - montant
      responses:
        '201':
          description: "Paiement ajouté avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Paiement'
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Paiement ajouté avec succès."
        '400':
          description: "Requête invalide, montant manquant ou incorrect"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Le montant du paiement est requis et doit être un nombre positif."
        '404':
          description: "Dette non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "La dette spécifiée n'existe pas."
        '401':
          description: "Non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Non authentifié."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à ajouter un paiement à cette dette."

# Les routes pour la resource archive dette
  /archives/dettes:
    get:
      tags:
        - Dettes Archivées
      summary: "Récupérer les dettes archivées"
      description: "Récupère toutes les dettes archivées ou filtre les dettes archivées en fonction du client et de la date fournis. Si aucun paramètre n'est fourni, renvoie toutes les dettes archivées."
      parameters:
        - name: client
          in: query
          required: false
          description: "ID du client pour filtrer les dettes archivées"
          schema:
            type: integer
            example: 1
        - name: date
          in: query
          required: false
          description: "Date pour filtrer les dettes archivées au format YYYY-MM-DD"
          schema:
            type: string
            format: date
            example: "2024-09-15"
      responses:
        '200':
          description: "Liste des dettes archivées"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dette'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Les dettes archivées ont été récupérées avec succès."
        '400':
          description: "Paramètres de requête invalides"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Les paramètres de la requête sont invalides."
      security:
        - bearerAuth: []

  /archives/client/{id}:
    get:
      tags:
        - Dettes Archivées
      summary: "Récupérer les dettes archivées pour un client spécifique"
      description: "Récupère les dettes archivées pour le client spécifié par l'ID. Une date optionnelle peut être fournie pour filtrer les dettes archivées jusqu'à cette date."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du client pour lequel les dettes archivées doivent être récupérées"
          schema:
            type: integer
            example: 1
        - name: date
          in: query
          required: false
          description: "Date pour filtrer les dettes archivées jusqu'à cette date au format YYYY-MM-DD"
          schema:
            type: string
            format: date
            example: "2024-09-15"
      responses:
        '200':
          description: "Liste des dettes archivées pour le client"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dette'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Les dettes archivées pour le client ont été récupérées avec succès."
        '400':
          description: "Paramètres de requête invalides"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Les paramètres de la requête sont invalides."
        '404':
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Le client spécifié n'a pas été trouvé."
      security:
        - bearerAuth: []

  /archives/dettes/{id}:
    get:
      tags:
        - Dettes Archivées
      summary: "Récupérer une dette archivée par son ID"
      description: "Récupère une dette archivée spécifique en fonction de l'ID fourni. Retourne les détails de la dette si elle est trouvée, sinon un message d'erreur."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la dette archivée à récupérer"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Détails de la dette archivée trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "La dette archivée a été récupérée avec succès."
        '404':
          description: "Dette non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Dette not found"
      security:
        - bearerAuth: []

# Les routes pour la restauration de dette archiver
  /restaure/{id}:
    post:
      tags:
        - Restaurer Dettes
      summary: "Restaurer une dette archivée par date"
      description: "Restaure une ou plusieurs dettes archiées en fonction de la date fournie. Retourne les dettes restaurées si trouvées, sinon un message d'erreur."
      parameters:
        - name: id
          in: path
          required: true
          description: "Date utilisée pour restaurer les dettes archivées, au format YYYY-MM-DD"
          schema:
            type: string
            format: date
            example: "2024-09-15"
      responses:
        '200':
          description: "Détails des dettes archivées restaurées"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dette'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Les dettes archivées ont été restaurées avec succès."
        '404':
          description: "Aucune dette trouvée pour la date fournie"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Dette not found for date"
      security:
        - bearerAuth: []

  /restaure/dettes/{id}:
    post:
      tags:
        - Restaurer Dettes
      summary: "Restaurer une dette archivée par identifiant"
      description: "Restaure une dette archivée en fonction de l'identifiant fourni. Retourne la dette restaurée si trouvée, sinon un message d'erreur."
      parameters:
        - name: id
          in: path
          required: true
          description: "Identifiant de la dette archivée à restaurer"
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: "Détails de la dette restaurée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dette'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "La dette a été restaurée avec succès."
        '404':
          description: "Aucune dette trouvée pour l'identifiant fourni"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Dette not found"
      security:
        - bearerAuth: []

  /restaure/client/{id}:
    post:
      tags:
        - Restaurer Dettes
      summary: "Restaurer les dettes archivées pour un client par identifiant"
      description: "Restaure toutes les dettes archivées pour le client identifié par l'identifiant fourni. Retourne les dettes restaurées si trouvées, sinon un message d'erreur."
      parameters:
        - name: id
          in: path
          required: true
          description: "Identifiant du client dont les dettes archivées doivent être restaurées"
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: "Liste des dettes restaurées pour le client"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dette'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Les dettes du client ont été restaurées avec succès."
        '404':
          description: "Aucune dette trouvée pour le client"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Aucune dette trouvée pour le client."
      security:
        - bearerAuth: []

# Les routes pour la resourcs demandes
  /demandes:
    get:
      tags:
        - Demandes
      summary: "Obtenir les demandes du client connecté"
      description: "Retourne la liste des demandes associées au client connecté, avec la possibilité de filtrer par état. Autorisé seulement pour les clients."
      parameters:
        - name: etat
          in: query
          required: false
          description: "Filtre les demandes par état (par exemple, 'en_attente', 'approuvée', 'refusée')"
          schema:
            type: string
            example: "en_attente"
      responses:
        '200':
          description: "Liste des demandes du client connecté"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Demande'
                    nullable: true
                  status:
                    type: string
                    enum: ['SUCCES']
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Les demandes ont été récupérées avec succès."
        '403':
          description: "Accès interdit (non autorisé)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Accès interdit. Vous devez être connecté en tant que client pour accéder à cette ressource."
      security:
        - bearerAuth: []

    post:
      tags:
        - Demandes
      summary: "Créer une nouvelle demande"
      description: "Permet à un client de créer une nouvelle demande avec des détails sur le montant et les articles associés."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                montant:
                  type: integer
                  description: "Le montant de la demande."
                  example: 150
                articles:
                  type: array
                  items:
                    type: object
                    properties:
                      articleId:
                        type: integer
                        description: "ID de l'article."
                        example: 1
                      quantity:
                        type: integer
                        description: "Quantité de l'article."
                        example: 2
                  description: "Liste des articles associés à la demande."
              required:
                - montant
                - articles
      responses:
        '201':
          description: "Demande créée avec succès"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
        '400':
          description: "Requête invalide"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "La demande n'a pas pu être créée. Vérifiez les données envoyées."
        '403':
          description: "Accès interdit (non autorisé)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à créer une demande."
      security:
        - bearerAuth: []

  /demandes/all:
    get:
      tags:
        - Demandes
      summary: "Obtenir toutes les demandes selon un état"
      description: "Récupère toutes les demandes filtrées par leur état. L'accès est autorisé uniquement aux utilisateurs ayant les permissions appropriées."
      parameters:
        - name: etat
          in: query
          description: "État des demandes à filtrer. Peut être 'annuler' ou 'en_cours'."
          required: false
          schema:
            type: string
            enum:
              - accepter
              - annuler
              - en_cours
            example: "en_cours"
      responses:
        '200':
          description: "Liste des demandes récupérées avec succès"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Demande'
        '403':
          description: "Accès interdit (non autorisé)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    example: null
                  status:
                    type: string
                    enum: ['ECHEC']
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à voir les demandes."
      security:
        - bearerAuth: []

  /demandes/show/{id}:
    get:
      tags:
        - Demandes
      summary: "Obtenir une demande spécifique par ID"
      description: "Récupère les détails d'une demande spécifique par son ID. Seul un boutiquier peut voir une demande spécifique."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la demande à récupérer."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Détails de la demande récupérés avec succès"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
        '403':
          description: "Accès interdit (non autorisé)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à voir cette demande."
                  status:
                    type: integer
                    example: 403
        '404':
          description: "Demande non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Demande not found"
                  status:
                    type: integer
                    example: 404
      security:
        - bearerAuth: []

  /demandes/{id}/disponible:
    get:
      tags:
        - Demandes
      summary: "Vérifier la disponibilité des articles pour une demande"
      description: "Vérifie la disponibilité des articles pour une demande spécifique. Retourne les articles disponibles et non disponibles."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la demande pour laquelle vérifier la disponibilité des articles."
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: "Disponibilité des articles récupérée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      demande:
                        $ref: '#/components/schemas/Demande'
                      article_disponible:
                        type: object
                        properties:
                          oui:
                            type: array
                            items:
                              $ref: '#/components/schemas/ArticleDisponible'
                          non:
                            type: array
                            items:
                              $ref: '#/components/schemas/ArticleDisponible'
                    example:
                      demande:
                        id: 2
                        date: "1985-02-10T00:00:00Z"
                        montant: 135
                        etat: "en_cours"
                        client:
                          id: 2
                          surname: "Miss Emma Emard"
                          addrese: "546 Mayert Oval\nTurcotteview, PA 40695-2228"
                          telephone: "707692997"
                          categorie: "bronze"
                          qrcode: "http://127.0.0.1:8000/storage/qrcodes/66e7181557c84.png"
                      article_disponible:
                        oui:
                          - id: 9
                            quantity: 3
                            price: "78.00"
                          - id: 10
                            quantity: 10
                            price: "208.00"
                        non:
                          - id: 8
                            quantity: 7
                            price: "453.00"
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Ressource trouvée"
        '403':
          description: "Accès interdit (non autorisé)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    example: null
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à vérifier la disponibilité des articles pour cette demande."
        '404':
          description: "Demande non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    example: null
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Demande not found"
      security:
        - bearerAuth: []

  /demandes/{id}:
    post:
      tags:
        - Demandes
      summary: "Changer l'état d'une demande"
      description: "Permet de changer l'état d'une demande en fournissant un nouvel état et éventuellement un motif si l'état est 'annuler'."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la demande dont l'état doit être modifié."
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                etat:
                  type: string
                  enum:
                    - annuler
                    - valider
                  example: "annuler"
                motif:
                  type: string
                  description: "Motif pour l'annulation de la demande. Obligatoire si l'état est 'annuler'."
                  example: "Erreur de saisie"
              required:
                - etat
      responses:
        '200':
          description: "État de la demande mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Demande state updated successfully"
        '400':
          description: "Requête invalide (erreurs de validation ou paramètres manquants)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    example: null
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Invalid request data or missing parameters"
        '404':
          description: "Demande non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    example: null
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Demande not found"
        '403':
          description: "Accès interdit (non autorisé à changer l'état de la demande)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    example: null
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Vous n'êtes pas autorisé à changer l'état de cette demande"
      security:
        - bearerAuth: []

  /demandes/{id}/relance:
    post:
      tags:
        - Demandes
      summary: "Relancer une demande"
      description: "Permet de relancer une demande en créant une nouvelle demande basée sur l'ancienne avec un utilisateur actuel comme initiateur."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de la demande à relancer."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Demande relancée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Demande relancée avec succès"
                  data:
                    $ref: '#/components/schemas/DemandeResource'
        '404':
          description: "Demande non trouvée ou erreur lors de la relance"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: "Données de la demande initiale en cas d'erreur"
                    example: null
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Demande not found"
      security:
        - bearerAuth: []

# Les routes pour la resouce notification
  /notification/client/relance/{id}:
    get:
      tags:
        - Notifications
      summary: "Relancer une notification pour un client"
      description: "Permet de relancer une notification pour un client spécifique. Cette opération est accessible uniquement aux administrateurs et aux boutiquiers."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du client pour lequel la notification doit être relancée."
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Notification relancée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NotificationResource'
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Notification relancée avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "This action is unauthorized"
        '404':
          description: "Notification non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Notification not found"
      security:
        - bearerAuth: []

  /notification/client/all:
    post:
      tags:
        - Notifications
      summary: "Relancer toutes les notifications pour les clients"
      description: "Permet de relancer toutes les notifications pour tous les clients. Cette opération est accessible uniquement aux administrateurs et aux boutiquiers."
      responses:
        '200':
          description: "Notifications relancées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Les notifications ont été envoyées avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "This action is unauthorized"
        '500':
          description: "Erreur serveur lors de l'envoi des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Les notifications n'ont pas été envoyées"
      security:
        - bearerAuth: []

  /notification/client/{id}/message:
    post:
      tags:
        - Notifications
      summary: "Envoyer un message de notification à un client"
      description: "Permet d'envoyer un message de notification à un client spécifique. Cette opération est accessible uniquement aux administrateurs et aux boutiquiers."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du client auquel envoyer la notification"
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Le message de la notification"
                  example: "Votre demande a été approuvée"
      responses:
        '200':
          description: "Notification envoyée avec succès"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResource'
        '400':
          description: "Requête invalide, message requis"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "The message field is required."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "This action is unauthorized."
        '500':
          description: "Erreur serveur lors de l'envoi du message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "The notification could not be sent."
      security:
        - bearerAuth: []

  /notification/client/message:
    post:
      tags:
        - Notifications
      summary: "Envoyer un message de notification à tous les clients"
      description: "Permet d'envoyer un message de notification à tous les clients. Cette opération est accessible uniquement aux administrateurs et aux boutiquiers."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Le message de la notification à envoyer à tous les clients"
                  example: "Votre nouvelle demande a été approuvée"
      responses:
        '200':
          description: "Les notifications ont été envoyées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Les notifications de message ont été envoyées avec succès"
        '400':
          description: "Requête invalide, message requis"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Le champ message est requis."
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Cette action est non autorisée."
        '500':
          description: "Erreur serveur lors de l'envoi des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Les notifications de message n'ont pas été envoyées."
      security:
        - bearerAuth: []

# Les routes pour la resource notification du client connecter
  /notification/client/nonlue:
    get:
      tags:
        - Notifications Client
      summary: "Récupérer les notifications non lues du client"
      description: "Permet de récupérer toutes les notifications non lues pour le client actuellement authentifié. Cette opération est accessible uniquement aux clients."
      responses:
        '200':
          description: "Les notifications non lues ont été récupérées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                    example: [
                      {
                        "id": 1,
                        "type": "Message",
                        "data": {
                          "message": "Votre demande a été approuvée"
                        },
                        "message": "Votre demande a été approuvée",
                        "lue": false,
                        "date_lue": null,
                        "dure": "2 jours",
                        "date": "2024-09-14 10:00:00"
                      }
                    ]
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Notifications non lues récupérées avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Cette action est non autorisée."
        '500':
          description: "Erreur serveur lors de la récupération des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications non lues."
      security:
        - bearerAuth: []

  /notification/client/lue:
    get:
      tags:
        - Notifications Client
      summary: "Récupérer les notifications lues du client"
      description: "Permet de récupérer toutes les notifications lues pour le client actuellement authentifié. Cette opération est accessible uniquement aux clients."
      responses:
        '200':
          description: "Les notifications lues ont été récupérées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                    example: [
                      {
                        "id": 1,
                        "type": "Message",
                        "data": {
                          "message": "Votre demande a été approuvée"
                        },
                        "message": "Votre demande a été approuvée",
                        "lue": true,
                        "date_lue": "2024-09-14 10:00:00",
                        "dure": "2 jours",
                        "date": "2024-09-14 10:00:00"
                      }
                    ]
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Notifications lues récupérées avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Cette action est non autorisée."
        '500':
          description: "Erreur serveur lors de la récupération des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications lues."
      security:
        - bearerAuth: []

  /notification/client/lire/{id}:
    patch:
      tags:
        - Notifications Client
      summary: "Marquer une notification comme lue"
      description: "Permet de marquer une notification spécifique comme lue pour le client actuellement authentifié. Cette opération est accessible uniquement aux clients."
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: "L'identifiant de la notification à marquer comme lue"
      responses:
        '200':
          description: "Notification marquée comme lue avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Notification'
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Notification marquée comme lue avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Cette action est non autorisée."
        '404':
          description: "Notification non trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Notification non trouvée."
        '500':
          description: "Erreur serveur lors de la mise à jour de la notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Erreur lors de la mise à jour de la notification."
      security:
        - bearerAuth: []

  /demandes/notifications/client:
    get:
      tags:
        - Notifications Demande
      summary: "Récupérer les notifications de réponse aux demandes"
      description: "Permet de récupérer toutes les notifications relatives aux réponses aux demandes pour le client actuellement authentifié. Cette opération est accessible uniquement aux clients."
      responses:
        '200':
          description: "Notifications de réponse aux demandes récupérées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                    example:
                      - id: 1
                        type: "Réponse Demande"
                        data:
                          message: "Votre demande a reçu une réponse."
                        message: "Réponse reçue"
                        lue: false
                        date_lue: null
                        dure: "2 jours"
                        date: "2024-09-14 10:00:00"
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Notifications récupérées avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Cette action est non autorisée."
        '500':
          description: "Erreur serveur lors de la récupération des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications."
      security:
        - bearerAuth: []

  /demandes/notifications/client/{id}:
    get:
      tags:
        - Notifications Demande
      summary: "Récupérer les notifications de réponse aux demandes pour un client spécifique"
      description: "Permet de récupérer toutes les notifications relatives aux réponses aux demandes pour un client spécifique, identifié par son ID. Cette opération est accessible uniquement aux utilisateurs autorisés."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du client pour lequel récupérer les notifications"
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: "Notifications de réponse aux demandes récupérées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                    example:
                      - id: 1
                        type: "Réponse Demande"
                        data:
                          message: "Votre demande a reçu une réponse."
                        message: "Réponse reçue"
                        lue: false
                        date_lue: null
                        dure: "2 jours"
                        date: "2024-09-14 10:00:00"
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Notifications récupérées avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Cette action est non autorisée."
        '404':
          description: "Client non trouvé ou aucune notification disponible"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Aucune notification trouvée pour le client spécifié."
        '500':
          description: "Erreur serveur lors de la récupération des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications."
      security:
        - bearerAuth: []

  /demandes/notifications:
    get:
      tags:
        - Notifications Demande
      summary: "Récupérer les notifications relatives aux demandes soumises par l'utilisateur connecté"
      description: "Permet de récupérer toutes les notifications liées aux demandes soumises par l'utilisateur connecté. Cette opération est accessible uniquement aux utilisateurs autorisés."
      responses:
        '200':
          description: "Notifications relatives aux demandes récupérées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                    example:
                      - id: 1
                        type: "Demande Soumise"
                        data:
                          message: "Votre demande a été soumise avec succès."
                        message: "Demande soumise"
                        lue: false
                        date_lue: null
                        dure: "2 jours"
                        date: "2024-09-14 10:00:00"
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "SUCCES"
                  message:
                    type: string
                    example: "Notifications récupérées avec succès"
        '403':
          description: "Accès interdit"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Cette action est non autorisée."
        '404':
          description: "Aucune notification disponible"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Aucune notification trouvée pour l'utilisateur."
        '500':
          description: "Erreur serveur lors de la récupération des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - SUCCES
                      - ECHEC
                    example: "ECHEC"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications."
      security:
        - bearerAuth: []



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Article:
      type: object
      properties:
        libelle:
          type: string
          example: "Chaussures"
        price:
          type: number
          format: float
          example: 49.99
        quantity:
          type: integer
          example: 100

    Client:
      type: object
      properties:
        id:
          type: integer
          description: "ID du client"
          example: 1
        surname:
          type: string
          description: "Le surnom du client"
          example: "Dupont"
        adresse:
          type: string
          description: "L'adresse du client"
          example: "123 Rue de Paris, 75001 Paris"
        telephone:
          type: string
          description: "Le numéro de téléphone du client"
          example: "0123456789"
        categorie:
          type: string
          description: "La catégorie du client"
          example: "silver"
        max_montant:
          type: integer
          description: "Le montant maximal autorisé pour les clients de la catégorie silver"
          example: 1000
        qrcode:
          type: string
          description: "URL du QR code du client"
          example: "http://localhost/qrcodes/123456.png"
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
          description: "ID de l'utilisateur"
          example: 1
        nom:
          type: string
          description: "Nom de l'utilisateur"
          example: "Martin"
        prenom:
          type: string
          description: "Prénom de l'utilisateur"
          example: "Jean"
        photo:
          type: string
          description: "URL de la photo de l'utilisateur"
          example: "http://localhost/photos/user1.jpg"
        email:
          type: string
          description: "Adresse email de l'utilisateur"
          example: "jean.martin@example.com"
        role:
          type: string
          description: "Rôle de l'utilisateur"
          example: "admin"

    ClientDette:
      type: object
      properties:
        id:
          type: integer
          description: "ID du client"
          example: 2
        surname:
          type: string
          description: "Le surnom du client"
          example: "Emard"
        telephone:
          type: string
          description: "Le numéro de téléphone du client"
          example: "0543123456"
        adresse:
          type: string
          description: "L'adresse du client"
          example: "25 Avenue des Champs, 75008 Paris"
        dettes:
          type: array
          items:
            $ref: '#/components/schemas/Dette'

    Dette:
      type: object
      properties:
        id:
          type: integer
          description: "ID de la dette"
          example: 5
        date:
          type: string
          format: date
          description: "Date de la dette"
          example: "2024-09-16"
        echeance:
          type: string
          format: date
          description: "Date d'échéance de la dette"
          example: "2024-10-16"
        date_archive:
          type: string
          format: date
          description: "Date d'archivage de la dette"
          example: "2024-12-01"
        montant:
          type: number
          format: float
          description: "Montant total de la dette"
          example: 500.75
        montant_du:
          type: number
          format: float
          description: "Montant déjà versé pour cette dette"
          example: 200.00
        montant_restant:
          type: number
          format: float
          description: "Montant restant à payer"
          example: 300.75

    Paiement:
      type: object
      properties:
        id:
          type: integer
          description: "ID du paiement"
          example: 3
        montant:
          type: number
          format: float
          description: "Montant du paiement"
          example: 150.00
        date:
          type: string
          format: date
          description: "Date du paiement"
          example: "2024-09-12"
        detteId:
          type: integer
          description: "ID de la dette associée"
          example: 5
        clientId:
          type: integer
          description: "ID du client associé"
          example: 2
        dette:
          $ref: '#/components/schemas/Dette'
        client:
          $ref: '#/components/schemas/Client'


    Demande:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: "2024-09-16"
        montant:
          type: number
          format: float
          example: 150.75
        motif:
          type: string
          example: "Demande pour achat matériel"
        etat:
          type: string
          example: "en_attente"
        client:
          # $ref: '#/components/schemas/Client'
        articles:
          type: array
          items:
            # $ref: '#/components/schemas/Article'

    ArticleDisponible:
      type: object
      properties:
        id:
          type: integer
          example: 9
        quantity:
          type: integer
          example: 3
        price:
          type: string
          example: "78.00"

    NotificationResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: "NotificationType"
        data:
          type: object
          additionalProperties: true
          example: {"key": "value"}
        message:
          type: string
          example: "This is a notification message."
        lue:
          type: boolean
          example: false
        date_lue:
          type: string
          format: date-time
          example: "2023-09-16T15:30:00Z"
        dure:
          type: string
          example: "2 hours ago"
        date:
          type: string
          format: date-time
          example: "2023-09-16T13:00:00Z"


    Notification:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: "Demande Soumise"
        data:
          type: object
          additionalProperties: true
        message:
          type: string
          example: "Votre demande a été soumise avec succès."
        lue:
          type: boolean
          example: false
        date_lue:
          type: string
          format: date-time
          nullable: true
        dure:
          type: string
          example: "2 jours"
        date:
          type: string
          format: date-time
          example: "2024-09-14 10:00:00"
